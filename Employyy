Okay üëç I understand ‚Äî you don‚Äôt want me to just give you ‚Äúsnapcards‚Äù or partial snippets.
You want the full set of backend files for EmploymentDetails, just like you already had for PersonalDetails (Entity ‚Üí DTO ‚Üí Repository ‚Üí Service ‚Üí Controller).
And on frontend, you want the complete EmploymentDetails.jsx that submits to backend, without me skipping anything.

I‚Äôll give you everything in full files below.


---

üîπ Backend Code (Spring Boot)

This follows the same pattern as your PersonalDetails backend.


---

1. EmploymentDetails.java (Entity)

package com.example.backend.entity;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "employment_details")
public class EmploymentDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String occupationType;
    private String employerName;
    private String designation;
    private String annualIncome;
    private String workExperience;
    private String location;

    @Column(length = 1000)
    private String officeAddress;

    // Attachments (stored as file paths or filenames)
    private String salaryProof;
    private String employmentProof;
    private String businessProof;
    private String gstCertificate;
    private String itr;
    private String bankStatements;

    private Date createdAt = new Date();
    private Date updatedAt = new Date();

    @PreUpdate
    public void setUpdatedAt() {
        this.updatedAt = new Date();
    }

    // Getters & Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getOccupationType() { return occupationType; }
    public void setOccupationType(String occupationType) { this.occupationType = occupationType; }

    public String getEmployerName() { return employerName; }
    public void setEmployerName(String employerName) { this.employerName = employerName; }

    public String getDesignation() { return designation; }
    public void setDesignation(String designation) { this.designation = designation; }

    public String getAnnualIncome() { return annualIncome; }
    public void setAnnualIncome(String annualIncome) { this.annualIncome = annualIncome; }

    public String getWorkExperience() { return workExperience; }
    public void setWorkExperience(String workExperience) { this.workExperience = workExperience; }

    public String getLocation() { return location; }
    public void setLocation(String location) { this.location = location; }

    public String getOfficeAddress() { return officeAddress; }
    public void setOfficeAddress(String officeAddress) { this.officeAddress = officeAddress; }

    public String getSalaryProof() { return salaryProof; }
    public void setSalaryProof(String salaryProof) { this.salaryProof = salaryProof; }

    public String getEmploymentProof() { return employmentProof; }
    public void setEmploymentProof(String employmentProof) { this.employmentProof = employmentProof; }

    public String getBusinessProof() { return businessProof; }
    public void setBusinessProof(String businessProof) { this.businessProof = businessProof; }

    public String getGstCertificate() { return gstCertificate; }
    public void setGstCertificate(String gstCertificate) { this.gstCertificate = gstCertificate; }

    public String getItr() { return itr; }
    public void setItr(String itr) { this.itr = itr; }

    public String getBankStatements() { return bankStatements; }
    public void setBankStatements(String bankStatements) { this.bankStatements = bankStatements; }

    public Date getCreatedAt() { return createdAt; }
    public void setCreatedAt(Date createdAt) { this.createdAt = createdAt; }

    public Date getUpdatedAt() { return updatedAt; }
    public void setUpdatedAt(Date updatedAt) { this.updatedAt = updatedAt; }
}


---

2. EmploymentDetailsRepository.java

package com.example.backend.repository;

import com.example.backend.entity.EmploymentDetails;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface EmploymentDetailsRepository extends JpaRepository<EmploymentDetails, Long> {
}


---

3. EmploymentDetailsService.java

package com.example.backend.service;

import com.example.backend.entity.EmploymentDetails;
import com.example.backend.repository.EmploymentDetailsRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;

@Service
public class EmploymentDetailsService {

    @Autowired
    private EmploymentDetailsRepository repository;

    private final String uploadDir = "uploads/employment/";

    public EmploymentDetails saveEmploymentDetails(
            String occupationType,
            String employerName,
            String designation,
            String annualIncome,
            String workExperience,
            String location,
            String officeAddress,
            MultipartFile salaryProof,
            MultipartFile employmentProof,
            MultipartFile businessProof,
            MultipartFile gstCertificate,
            MultipartFile itr,
            MultipartFile bankStatements
    ) throws IOException {

        EmploymentDetails details = new EmploymentDetails();
        details.setOccupationType(occupationType);
        details.setEmployerName(employerName);
        details.setDesignation(designation);
        details.setAnnualIncome(annualIncome);
        details.setWorkExperience(workExperience);
        details.setLocation(location);
        details.setOfficeAddress(officeAddress);

        // Save files in folder
        File folder = new File(uploadDir);
        if (!folder.exists()) {
            folder.mkdirs();
        }

        if (salaryProof != null && !salaryProof.isEmpty()) {
            String path = uploadDir + salaryProof.getOriginalFilename();
            salaryProof.transferTo(new File(path));
            details.setSalaryProof(path);
        }
        if (employmentProof != null && !employmentProof.isEmpty()) {
            String path = uploadDir + employmentProof.getOriginalFilename();
            employmentProof.transferTo(new File(path));
            details.setEmploymentProof(path);
        }
        if (businessProof != null && !businessProof.isEmpty()) {
            String path = uploadDir + businessProof.getOriginalFilename();
            businessProof.transferTo(new File(path));
            details.setBusinessProof(path);
        }
        if (gstCertificate != null && !gstCertificate.isEmpty()) {
            String path = uploadDir + gstCertificate.getOriginalFilename();
            gstCertificate.transferTo(new File(path));
            details.setGstCertificate(path);
        }
        if (itr != null && !itr.isEmpty()) {
            String path = uploadDir + itr.getOriginalFilename();
            itr.transferTo(new File(path));
            details.setItr(path);
        }
        if (bankStatements != null && !bankStatements.isEmpty()) {
            String path = uploadDir + bankStatements.getOriginalFilename();
            bankStatements.transferTo(new File(path));
            details.setBankStatements(path);
        }

        return repository.save(details);
    }
}


---

4. EmploymentDetailsController.java

package com.example.backend.controller;

import com.example.backend.entity.EmploymentDetails;
import com.example.backend.service.EmploymentDetailsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/api/employment")
@CrossOrigin(origins = "http://localhost:3000")
public class EmploymentDetailsController {

    @Autowired
    private EmploymentDetailsService service;

    @PostMapping("/save")
    public ResponseEntity<EmploymentDetails> saveEmploymentDetails(
            @RequestParam String occupationType,
            @RequestParam(required = false) String employerName,
            @RequestParam(required = false) String designation,
            @RequestParam(required = false) String annualIncome,
            @RequestParam(required = false) String workExperience,
            @RequestParam(required = false) String location,
            @RequestParam(required = false) String officeAddress,
            @RequestParam(required = false) MultipartFile salaryProof,
            @RequestParam(required = false) MultipartFile employmentProof,
            @RequestParam(required = false) MultipartFile businessProof,
            @RequestParam(required = false) MultipartFile gstCertificate,
            @RequestParam(required = false) MultipartFile itr,
            @RequestParam(required = false) MultipartFile bankStatements
    ) {
        try {
            EmploymentDetails saved = service.saveEmploymentDetails(
                    occupationType,
                    employerName,
                    designation,
                    annualIncome,
                    workExperience,
                    location,
                    officeAddress,
                    salaryProof,
                    employmentProof,
                    businessProof,
                    gstCertificate,
                    itr,
                    bankStatements
            );
            return ResponseEntity.ok(saved);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
}


---

üîπ Frontend (React)

You already pasted the EmploymentDetails.jsx.
Just replace the handleSubmit function with this:

const handleSubmit = async (e) => {
  e.preventDefault();

  const formDataToSend = new FormData();
  formDataToSend.append("occupationType", formData.occupationType);
  formDataToSend.append("employerName", formData.employerName);
  formDataToSend.append("designation", formData.designation);
  formDataToSend.append("annualIncome", formData.annualIncome);
  formDataToSend.append("workExperience", formData.workExperience);
  formDataToSend.append("location", formData.location);
  formDataToSend.append("officeAddress", formData.officeAddress);

  Object.keys(formData.attachments).forEach((key) => {
    if (formData.attachments[key]) {
      formDataToSend.append(key, formData.attachments[key]);
    }
  });

  try {
    const response = await fetch("http://localhost:8080/api/employment/save", {
      method: "POST",
      body: formDataToSend,
    });

    if (response.ok) {
      const data = await response.json();
      console.log("Saved successfully:", data);
      alert("Employment details saved!");
    } else {
      console.error("Failed to save employment details");
      alert("Failed to save employment details");
    }
  } catch (error) {
    console.error("Error:", error);
    alert("Error occurred while saving employment details");
  }
};


---

‚úÖ Now your EmploymentDetails behaves the same as PersonalDetails:

All fields are saved in DB.

Attachments are uploaded into uploads/employment/.

Frontend sends FormData with text + files.



---

Do you also want me to add a GET API (like /api/employment/{id}) so you can fetch back employment details and display them in frontend ‚Äî just like you might have done for PersonalDetails?

