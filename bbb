Give all those codes
ChatGPT said:

Perfect üëç let‚Äôs build this clean and complete so you don‚Äôt get 403 or 500 anymore.
I‚Äôll give you all the backend code you need for your PersonalDetails feature.

1Ô∏è‚É£ Entity (PersonalDetails.java)
package com.example.demo.entity;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "personal_details")
public class PersonalDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long userId;

    private String firstName;
    private String middleName;
    private String lastName;
    private String gender;
    private String maritalStatus;
    private String phoneNumber;
    private String alternatePhone;
    private String emailAddress;
    private String aadhaarNumber;
    private String panNumber;
    private String currentAddress;
    private String permanentAddress;

    private LocalDateTime updatedAt = LocalDateTime.now();

    // Getters and Setters
    public Long getUserId() {
        return userId;
    }
    public void setUserId(Long userId) {
        this.userId = userId;
    }

    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getMiddleName() {
        return middleName;
    }
    public void setMiddleName(String middleName) {
        this.middleName = middleName;
    }

    public String getLastName() {
        return lastName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getGender() {
        return gender;
    }
    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getMaritalStatus() {
        return maritalStatus;
    }
    public void setMaritalStatus(String maritalStatus) {
        this.maritalStatus = maritalStatus;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }
    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getAlternatePhone() {
        return alternatePhone;
    }
    public void setAlternatePhone(String alternatePhone) {
        this.alternatePhone = alternatePhone;
    }

    public String getEmailAddress() {
        return emailAddress;
    }
    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    public String getAadhaarNumber() {
        return aadhaarNumber;
    }
    public void setAadhaarNumber(String aadhaarNumber) {
        this.aadhaarNumber = aadhaarNumber;
    }

    public String getPanNumber() {
        return panNumber;
    }
    public void setPanNumber(String panNumber) {
        this.panNumber = panNumber;
    }

    public String getCurrentAddress() {
        return currentAddress;
    }
    public void setCurrentAddress(String currentAddress) {
        this.currentAddress = currentAddress;
    }

    public String getPermanentAddress() {
        return permanentAddress;
    }
    public void setPermanentAddress(String permanentAddress) {
        this.permanentAddress = permanentAddress;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
}

2Ô∏è‚É£ Repository (PersonalDetailsRepository.java)
package com.example.demo.repository;

import com.example.demo.entity.PersonalDetails;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface PersonalDetailsRepository extends JpaRepository<PersonalDetails, Long> {
}

3Ô∏è‚É£ Service (PersonalDetailsService.java)
package com.example.demo.service;

import com.example.demo.entity.PersonalDetails;
import com.example.demo.repository.PersonalDetailsRepository;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class PersonalDetailsService {

    private final PersonalDetailsRepository repository;

    public PersonalDetailsService(PersonalDetailsRepository repository) {
        this.repository = repository;
    }

    public PersonalDetails saveDetails(PersonalDetails details) {
        return repository.save(details);
    }

    public Optional<PersonalDetails> getDetails(Long userId) {
        return repository.findById(userId);
    }
}

4Ô∏è‚É£ Controller (PersonalDetailsController.java)
package com.example.demo.controller;

import com.example.demo.entity.PersonalDetails;
import com.example.demo.service.PersonalDetailsService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/api/personal-details")
public class PersonalDetailsController {

    private final PersonalDetailsService service;

    public PersonalDetailsController(PersonalDetailsService service) {
        this.service = service;
    }

    // ‚úÖ POST - Save personal details
    @PostMapping
    public ResponseEntity<PersonalDetails> createPersonalDetails(@RequestBody PersonalDetails details) {
        return ResponseEntity.ok(service.saveDetails(details));
    }

    // ‚úÖ GET - Fetch by userId
    @GetMapping("/{userId}")
    public ResponseEntity<PersonalDetails> getPersonalDetails(@PathVariable Long userId) {
        Optional<PersonalDetails> details = service.getDetails(userId);
        return details.map(ResponseEntity::ok)
                      .orElse(ResponseEntity.notFound().build());
    }
}

5Ô∏è‚É£ Security Config (to fix 403) (SecurityConfig.java)
package com.example.demo.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .authorizeHttpRequests()
            .requestMatchers("/api/personal-details/**").permitAll() // allow personal details
            .anyRequest().authenticated()
            .and()
            .httpBasic();
        return http.build();
    }
}

‚úÖ How to Test in Swagger

Start backend ‚Üí Tomcat started on port 8080.

Open Swagger ‚Üí http://localhost:8080/swagger-ui/index.html.

Try POST /api/personal-details with JSON:

{
  "firstName": "John",
  "lastName": "Doe",
  "gender": "male",
  "maritalStatus": "single",
  "phoneNumber": "9876543210",
  "emailAddress": "john.doe@example.com",
  "aadhaarNumber": "123412341234",
  "panNumber": "ABCDE1234F",
  "currentAddress": "Chennai",
  "permanentAddress": "Chennai"
}


Copy the returned userId.

Call GET /api/personal-details/{userId} ‚Üí should return the same record.
