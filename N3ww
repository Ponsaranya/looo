Perfect 👍 thanks for clarifying.

So what you want is:

Only one ID field (id), auto-generated by DB.

No extra userId.

All your personal details (firstName, phoneNumber, etc.) should save to DB when you POST.

You don’t need to send id in JSON — DB will create it.



---

Here’s the clean entity for you 👇

✅ Entity (PersonalDetails.java)

package com.example.demo.entity;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "personal_details")
public class PersonalDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;   // ✅ Single ID

    private String firstName;
    private String middleName;
    private String lastName;
    private String gender;
    private String maritalStatus;
    private String phoneNumber;
    private String alternatePhone;
    private String emailAddress;
    private String aadhaarNumber;
    private String panNumber;
    private String currentAddress;
    private String permanentAddress;

    private LocalDateTime updatedAt = LocalDateTime.now();

    // Getters & Setters
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }

    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getMiddleName() {
        return middleName;
    }
    public void setMiddleName(String middleName) {
        this.middleName = middleName;
    }

    public String getLastName() {
        return lastName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getGender() {
        return gender;
    }
    public void setGender(String gender) {
        this.gender = gender;
    }

    public String getMaritalStatus() {
        return maritalStatus;
    }
    public void setMaritalStatus(String maritalStatus) {
        this.maritalStatus = maritalStatus;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }
    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getAlternatePhone() {
        return alternatePhone;
    }
    public void setAlternatePhone(String alternatePhone) {
        this.alternatePhone = alternatePhone;
    }

    public String getEmailAddress() {
        return emailAddress;
    }
    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    public String getAadhaarNumber() {
        return aadhaarNumber;
    }
    public void setAadhaarNumber(String aadhaarNumber) {
        this.aadhaarNumber = aadhaarNumber;
    }

    public String getPanNumber() {
        return panNumber;
    }
    public void setPanNumber(String panNumber) {
        this.panNumber = panNumber;
    }

    public String getCurrentAddress() {
        return currentAddress;
    }
    public void setCurrentAddress(String currentAddress) {
        this.currentAddress = currentAddress;
    }

    public String getPermanentAddress() {
        return permanentAddress;
    }
    public void setPermanentAddress(String permanentAddress) {
        this.permanentAddress = permanentAddress;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
}


---

✅ Service change

public Optional<PersonalDetails> getDetails(Long id) {
    return repository.findById(id);
}


---

✅ Controller change

@GetMapping("/{id}")
public ResponseEntity<PersonalDetails> getPersonalDetails(@PathVariable Long id) {
    Optional<PersonalDetails> details = service.getDetails(id);
    return details.map(ResponseEntity::ok)
                  .orElse(ResponseEntity.notFound().build());
}


---

✅ Swagger Test JSON (POST /api/personal-details)

{
  "firstName": "John",
  "lastName": "Doe",
  "gender": "Male",
  "maritalStatus": "Single",
  "phoneNumber": "9876543210",
  "alternatePhone": "9123456780",
  "emailAddress": "john.doe@example.com",
  "aadhaarNumber": "123412341234",
  "panNumber": "ABCDE1234F",
  "currentAddress": "Chennai",
  "permanentAddress": "Chennai"
}

You don’t pass id. After saving, DB will generate it.
When you GET by that id, you’ll see the full record.


---

👉 Now you’ll only have id (no userId), and everything will work cleanly.

Do you want me to give you the entire updated Service + Controller code also (so you just copy-paste and don’t miss a single place)?

